{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","balance","tick","transactions","short","bind","long","adjustBalance","candle","this","push","time","datetime","price","close","side","setState","change","map","t","candles","reduce","a","b","rows","slice","index","key","moment","format","open","low","high","volume","className","onClick","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAiIeA,EA5Hf,YACE,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KAEDC,MAAQ,CACXC,QAAS,IACTC,KAAM,EACNC,aAAc,IAGhB,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBACZ,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAXH,EADtB,mEAeQG,GACJ,IAAML,EAAeM,KAAKT,MAAMG,aAChCA,EAAaO,KAAK,CAChBC,KAAMH,EAAOI,SACbC,MAAOL,EAAOM,MACdC,KAAM,UAERN,KAAKO,SAAS,CAACd,KAAMO,KAAKT,MAAME,KAAO,IACvCO,KAAKO,SAAS,CAACb,iBACfM,KAAKF,kBAxBT,2BA2BOC,GACH,IAAML,EAAeM,KAAKT,MAAMG,aAChCA,EAAaO,KAAK,CAChBC,KAAMH,EAAOI,SACbC,MAAOL,EAAOM,MACdC,KAAM,SAERN,KAAKO,SAAS,CAACd,KAAMO,KAAKT,MAAME,KAAO,IACvCO,KAAKO,SAAS,CAACb,iBACfM,KAAKF,kBApCT,sCAuCmB,IAAD,OACRU,EAASR,KAAKT,MAAMG,aAAae,KAAI,SAAAC,GAAC,MAC/B,SAAXA,EAAEJ,KACAK,IAAQ,EAAKpB,MAAME,MAAMY,MAAQK,EAAEN,MACnCM,EAAEN,MAAQO,IAAQ,EAAKpB,MAAME,MAAMY,SACpCO,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAIC,IAAG,GAE1Bd,KAAKO,SAAS,CAACf,QAASQ,KAAKT,MAAMC,QAAUgB,MA9CjD,+BAiDa,IAAD,OACFO,EAAOJ,IAAQK,MAAM,EAAGhB,KAAKT,MAAME,KAAO,GAAGgB,KAAI,SAACV,EAAQkB,GAC9D,OAAO,wBAAIC,IAAG,iBAAYnB,EAAOI,WAC/B,4BAAKgB,IAAOpB,EAAOI,UAAUiB,OAAO,qBACpC,4BAAKrB,EAAOsB,MACZ,4BAAKtB,EAAOuB,KACZ,4BAAKvB,EAAOwB,MACZ,4BAAKxB,EAAOM,OACZ,4BAAKN,EAAOyB,QACZ,4BAEI,EAAKjC,MAAME,OAASwB,EAAQ,6BAC1B,4BAAQQ,UAAU,QAAQC,QAAS,WAAQ,EAAK/B,MAAMI,KAAtD,SACA,4BAAQ0B,UAAU,OAAOC,QAAS,WAAQ,EAAK7B,KAAKE,KAApD,SAEA,UAMJL,EAAeM,KAAKT,MAAMG,aAAae,KAAI,SAACC,GAAD,OAC/C,wBAAIQ,IAAG,sBAAiBR,EAAER,OACxB,4BAAKiB,IAAOT,EAAER,MAAMkB,OAAO,qBAC3B,gCAAMV,EAAEN,OACR,4BAAKM,EAAEJ,UAGX,OACE,6BACE,yBAAKmB,UAAU,OACb,4CACA,yBAAKA,UAAU,WAAf,aAAoCzB,KAAKT,MAAMC,SAC/C,6BAAK,uEAEL,yBAAKiC,UAAU,OACb,6BACE,qCACA,+BACE,+BACE,4BACE,oCACA,oCACA,mCACA,oCACA,qCACA,sCACA,yCAGJ,+BAAQV,KAGZ,6BACE,4CACA,+BACE,+BACE,4BACE,oCACA,qCACA,sCAGJ,+BAAQrB,OAMhB,yBAAK+B,UAAU,UAAf,UAA+B,uBAAGE,KAAK,6BAAR,uBAtHvC,GAAyBC,IAAMC,WCOXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f8e1bdc1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { candles } from './data.json';\nimport moment from 'moment';\n\nexport class App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      balance: 10000.0,\n      tick: 0,\n      transactions: [],\n    };\n\n    this.short = this.short.bind(this);\n    this.long = this.long.bind(this);\n    this.adjustBalance = this.adjustBalance.bind(this);\n  }\n\n  short(candle) {\n    const transactions = this.state.transactions;\n    transactions.push({\n      time: candle.datetime,\n      price: candle.close,\n      side: 'short'\n    })\n    this.setState({tick: this.state.tick + 1});\n    this.setState({transactions});\n    this.adjustBalance();\n  }\n\n  long(candle) {\n    const transactions = this.state.transactions;\n    transactions.push({\n      time: candle.datetime,\n      price: candle.close,\n      side: 'long'\n    })\n    this.setState({tick: this.state.tick + 1});\n    this.setState({transactions});\n    this.adjustBalance();\n  }\n\n  adjustBalance() {\n    const change = this.state.transactions.map(t => (\n      t.side === 'long'\n      ? candles[this.state.tick].close - t.price\n      : t.price - candles[this.state.tick].close\n    )).reduce((a,b) => a + b, 0);\n\n    this.setState({balance: this.state.balance + change});\n  }\n\n  render () {\n    const rows = candles.slice(0, this.state.tick + 1).map((candle, index) => {\n      return <tr key={`candle-${candle.datetime}`}>\n        <td>{moment(candle.datetime).format('YYYY-MM-DD hh:mm')}</td>\n        <td>{candle.open}</td>\n        <td>{candle.low}</td>\n        <td>{candle.high}</td>\n        <td>{candle.close}</td>\n        <td>{candle.volume}</td>\n        <td>\n          {\n            this.state.tick === index ? <div>\n              <button className=\"short\" onClick={() => { this.short(candle) }}>Short</button>\n              <button className=\"long\" onClick={() => { this.long(candle) }}>Long</button>\n            </div>\n            : null\n          }\n        </td>\n      </tr>\n    });\n\n    const transactions = this.state.transactions.map((t) => (\n      <tr key={`transaction-${t.time}`}>\n        <td>{moment(t.time).format('YYYY-MM-DD hh:mm')}</td>\n        <td>${t.price}</td>\n        <td>{t.side}</td>\n      </tr>\n    ));\n    return (\n      <div>\n        <div className=\"App\">\n          <h1>trading room</h1>\n          <div className=\"balance\">Balance: ${this.state.balance}</div>\n          <div><small>Times are your local computer time.</small></div>\n\n          <div className=\"row\">\n            <div>\n              <h3>Ticks</h3>\n              <table>\n                <thead>\n                  <tr>\n                    <th>Time</th>\n                    <th>Open</th>\n                    <th>Low</th>\n                    <th>High</th>\n                    <th>Close</th>\n                    <th>Volume</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>{rows}</tbody>\n              </table>\n            </div>\n            <div>\n              <h3>Transactions</h3>\n              <table>\n                <thead>\n                  <tr>\n                    <th>Time</th>\n                    <th>Price</th>\n                    <th>Side</th>\n                  </tr>\n                </thead>\n                <tbody>{transactions}</tbody>\n              </table>\n            </div>\n          </div>\n\n        </div>\n        <div className=\"footer\">Author <a href=\"https://fivetwentysix.com\">fivetwentysix</a></div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}